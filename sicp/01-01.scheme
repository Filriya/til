(define (sqrt x) 
  (define (sqrt-iter x prev-guess next-guess)
    (if (good-enough? prev-guess next-guess)
      next-guess
      (sqrt-iter x next-guess (improve next-guess x))))
  
  (define (average x y)
    (/ (+ x y) 2))
  
  (define (good-enough? prev-guess next-guess)
    (< (abs (/ (- prev-guess next-guess) next-guess)) 0.0001))
  
  (define (abs x) 
    (cond 
      ((> x 0) x) 
      ((= x 0) 0)
      ((< x 0) (- x))))
  
  (define (square a) (* a a))

  (define (improve guess x)
    (average guess (/ x guess)))
  
  (sqrt-iter x 1.0 (improve 1.0 x))

)



