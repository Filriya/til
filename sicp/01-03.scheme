;ex 1.29
(define (integral-simpson f a b n)
  (define h (/ (- b a) n))
  (define (add-h x) (+ x h))
  (define (co k) (cond
                   ((= k 0) 1)
                   ((= k n) 1)
                   ((odd? k) 4)
                   (else 2)))
  (define (y k) (f (+ a (* h k))))
  (define (g k)
    (* (co k) (y k)))

  (* (sum g 0 inc n) (/ h 3)))

;ex 1.30
(define (sum term a next b)
      (define (iter a result)
        (if (> a b)
          result
          (iter (next a) (+ result (term a)))))
      (iter a 0))

; ex 1.31
; 反復プロセスのproduct

(define (iter-product term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (* (term a) result)))
  (iter a 1)))

; 再帰プロセスのproduct
(define (recu-product term a next b)
  (if (> a b)
    1
    (* (term a) (recu-product term (next a) next b))))

; productを使ったfactorial
(define (identity x) x)
(define (inc x) (+ x 1))

(define (product-factorial n)
  (recu-product identity 1 inc n))


; piの近似値を求める
(define (pi n)
  (* 4.0 (iter-product pi-term 3 pi-next n)))

(define (pi-term a)
    (/ (* (- a 1) (+ a 1)) (* a a)))
(define (pi-next a) (+ a 2))



;なんかはやい
; 反復プロセスのproductのテスト
(define (iter-product-factorial n)
  (iter-product identity 1 inc n))

(define (pi-kinji n)
  (if (even? n)
    (/ (* 2.0 (/ (square (ikkotobashiFactorial 2 n)) (square (ikkotobashiFactorial 1 n)))) n)
    (* (* 2.0 (/ (square (ikkotobashiFactorial 2 n)) (square (ikkotobashiFactorial 1 n)))) n)
    )
  )

(define (ikkotobashi x) (+ x 2))

(define (ikkotobashiFactorial a b)
  (recu-product identity a ikkotobashi b))



;ex 1.32
(define (accumulate combiner null-value term a next b)
  (if (> a b)
    null-value
    (combiner (term a) (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b)
  (accumulate + 0 term a next b)
  )

(define (product term a next b)
  (accumulate * 1 term a next b)
  )

(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (combiner (term a) result))))
  (iter a null-value))

;ex 1.33
(define (filtered-accumulate filter combiner null-value term a next b)
  (if (> a b)
    null-value
    (if (filter a b)
      (combiner (term a) (filtered-accumulate filter combiner null-value term (next a) next b))
      (filtered-accumulate filter combiner null-value term (next a) next b)))) 

(define (q1-33a a b)
  (define (filter a b)
    (prime? a))
  (filtered-accumulate filter + 0 square a inc b))


(define (q1-33b n)
  (define (gcd a b) 
    (if (= b 0)
      a
      (gcd b (remainder a b))
      )
    )
  (define (filter a b)
    (= (gcd a b) 1)
    )
  (filtered-accumulate filter * 1 identity 1 inc n))

;1.3.3
(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point) midpoint
      (let ((test-value (f midpoint))) 
        (cond ((positive? test-value)
               (search f neg-point midpoint)) ((negative? test-value)
               (search f midpoint pos-point)) (else midpoint))))))

(define (close-enough? x y) (< (abs (- x y)) 0.001))

(define (average x y) (/ (+ x y) 2))

(define (half-interval-method f a b) 
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
           (search f a b))
          ((and (negative? b-value) (positive? a-value))
           (search f b a)) (else
           (error "Values are not of opposite sign" a b)))))


(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2) (< (abs (- v1 v2)) tolerance)) 
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next)))) 
  (try first-guess))

(define (sqrt x) (fixed-point (lambda (y) (average y (/ x y))) 1.0))

;1.35
(define (golden-ratio) 
  (define (f x) (+ 1 (/ 1 x)))
    (fixed-point f 1.0))

;1.36
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess step-num)
    (display guess)
    (newline)
    (display step-num)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next (+ step-num 1)))))
  (try first-guess 1))


; fixed-point-ex1.36 動作確認用にファイ
(define (phi x)
  (fixed-point (lambda (x) (+ 1 (/ 1 x)))
               1.0))

(define (ex1.36 x)
  (fixed-point (lambda (x) (/ (log 1000) (log x)))
               x))

(define (ex1.36-av x)
  (fixed-point (lambda (x) (average x (/ (log 1000) (log x))))
               x))

(define (average x y)
  (/ (+ x y) 2))


;1.37
(define (cont-frac n d k)
  (define (cont-frac-iter i result)
    (if (= i 0) result
      (cont-frac-iter (- i 1) (/ (n i) (+ (d i) result)) )))
  (cont-frac-iter (- k 1) (/ (n k) (d k))))

;1.38
(define (nearly-e i)
  (+  2 (cont-frac 
    (lambda(j) 1.0) 
    (lambda(j) 
      (if (= (remainder j 3) 2) (* (+ 1 (/ (- j 2) 3)) 2) 1.0)) 
    i)))

;1.39
(define (tan-cf x k)
  (cont-frac (lambda (i) (if (= i 1) x (- (* x x))))
             (lambda (i) (- (* i 2) 1.0)) 
             k))


;1.3.4

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess step-num)
    ;(display guess)
    ;(newline)
    ;(display step-num)
    ;(newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next (+ step-num 1)))))
  (try first-guess 1))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y)))) 1.0))


; 微分
(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))

(define dx 0.00001)

; ニュートン法
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (sqrt2 x)
  (newtons-method (lambda (y) (- (square y) x)) 1.0))

;さらなる抽象化

(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))

;ex 1.40
(define (cubic a b c)
  (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))


;ex 1.41

(define (double f)
  (lambda (x) (f (f x))))

(define (inc x) (+ x 1))

;(((d (d d)) inc) 5)
;((( L(x) ((d d) ((d d) x))) inc) 5)
;(((d d) ((d d) inc)) 5)

;ここで(d d)について考える
;(d d)
;(L(x) (d (d x)))

;(((L (x) (d (d x))) ((L (x) (d (d x))) inc)) 5)
;(((L (x) (d (d x))) (d (d inc))) 5) 右側から展開
;(((L (x) (d (d x))) (inc inc (inc (inc x))) 5) 右側から展開



;ex 1.42
(define (compose f g)
  (lambda (x) (f (g x))))



;ex 1.43
(define (repeated f n)
  (define (repeated-iter f ret n)
    (if (= n 0) ret
      (repeated-iter f (compose f ret) (- n 1))))
  (repeated-iter f f (- n 1)))


;ex 1.44
(define (smooth f)
    (lambda (x) (/ (+ (f (- x dx)) (f x)  (f (+ x dx))) 3)))
(define dx 0.5)

(define (n-fold-smooth f n)
  ((repeated smooth n) f))


;ex 1.45
(define k 1)
(define (nth-root-test n x)
  (fixed-point ((repeated average-damp k) (lambda (y) (/ x (expt y (- n 1))))) 
               1.0))

;n=2,3はk=1でいける 2^1
;n=4,5,6,7はk=2でいける 2^2
;n=8....15はk=3でいける 2^3

;logn/log2
;n=1 k=0
;n=2 k=1
;n=3 k=1.5
;=> floor

(define (nth-root n x)
  (let ((k (floor (/ (log n) (log 2)))))
  (fixed-point ((repeated average-damp k) (lambda (y) (/ x (expt y (- n 1))))) 
               1.0)))


