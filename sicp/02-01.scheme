(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))


(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))


(define (mul-rat x y)
  (make-rat (* (numer x)(numer y))
            (* (denom x)(denom y))))

(define (div-rat x y)
  (make-rat (* (numer x)(denom y))
            (* (denom x)(numer y))))


(define (equal-rat? x y) 
  (= (* (numer x) (denom y))
     (* (denom x) (number y))))


(define (make-rat n d) 
  (let ((g (gcd n d)))
    (if (> (* n d) 0) 
      (cons (/ (abs n) g) (/ (abs d) g))
      (cons (/ (* -1 (abs n)) g) (/ (abs d) g)))))


(define (numer x) (car x))

(define (denom x) (cdr x))


(define (print-rat x) 
  (newline)
  (display (numer x)) 
  (display "/") 
  (display (denom x)))


;(define one-half (make-rat 1 2)) 
;(define one-third (make-rat 1 3)) 

;ex 2.2 

(define (make-segment p1 p2) (cons p1 p2))

(define (start-segment x) (car x))
(define (end-segment x) (cdr x))

(define (make-point x y) (cons x y))

(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (print-point p) 
  (newline)
  (display "(") 
  (display (x-point p)) 
  (display ",")
  (display (y-point p)) 
  (display ")"))


(define (midpoint-segment seg)
  (make-point 
    (/ (+ (x-point(start-segment seg)) (x-point(end-segment seg))) 2)
    (/ (+ (y-point(start-segment seg)) (y-point(end-segment seg))) 2)
   ))


(define (make-rectangle sideA sideB) (cons sideA sideB))

(define (sideA-rectangle rect) (car rect))
(define (sideB-rectangle rect) (car rect))


;ex 2.4

(define (cons x y) 
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))

;ex 2.5
(define (cons x y)
  (* (expt 2 x) (expt 3 y)))

(define (car z)
  (count-divisor z 2))

(define (cdr z)
  (count-divisor z 3))

(define (count-divisor x y)
  (define (iter x y i) 
             (if (= (modulo x y) 0) 
               (iter (/ x y) y (+ i 1)) 
               i))
  (iter x y 0))

;ex 2.6
(define zero (lambda (f) (lambda (x) x))) 

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))

(define one (lambda (f) (lambda (x)(f x))))
(define two (lambda (f) (lambda (x)(f (f x)))))

