;2.17
(define (last-pair ls)
  (if (null? (cdr ls))
    (car ls)
    (last-pair (cdr ls) )))

;2.18

(define (reverse li)
  (define (iter li ret)
    (if (null? li)
      ret
      (iter (cdr li) (cons (car li) ret))))
  (iter li (list)))


; ex2.19

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
          (+ (cc amount
                 (except-first-denomination
                   coin-values))
             (cc (- amount
                    (first-denomination
                      coin-values))
                 coin-values)))))

;coin-valuesの左端の要素を返す
(define (first-denomination coin-values)
  (car coin-values)
  )

; coin-valuesの左端を削ったリストを返す
(define (except-first-denomination coin-values)
  (cdr coin-values)
  )

; 与えられたリストを最後まで走査したか？
(define (no-more? coin-values)
  (null? coin-values)
  )

; ex-2.20

(define (parity n) (mod n 2))

(define (same-parity . ls)
  (filter-parity (parity (car ls)) ls)
  )

(define (same-parity2 first . rest)
  (cons first (filter-parity (parity first) rest))
  )

; par = 0 or 1
(define (filter-parity par ls)
  (if (null? ls)
    (list) ;空リスト
    (if (= (parity (car ls)) par)
      (cons (car ls) (filter-parity par (cdr ls)))
      (filter-parity par (cdr ls))
      )
    )
  )


;ex 2.21
(define (map proc items) 
  (if (null? items)
    (list)
    (cons (proc (car items))
          (map proc (cdr items)))))

(define (square a) (* a a))

(define (square-list1 items) 
  (if (null? items)
    (list)
    (cons (square (car items)) 
          (square-list1 (cdr items))))) 

(define (square-list2 items)
  (map square items))



;ex 2.23
(define (for-each proc items)
  (if (null? items)
    (list)
    (cons (proc (car items))
          (for-each proc (cdr items)))))


;(for-each 
;  (lambda (x) 
;    (newline)
;    (display x)) 
;  (list 57 321 88))

;ex 2.25
(define list1 (list 1 3 (list 5 7) 9))
(define list2 (list (list 7)))
(define list3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
(define list4 (list 1 2 3 4 5 6 7))

(car (cdr (car (cdr (cdr list1)))))
(car (cdar (cddr list1)))

(caar list2)

;(car (cdr (car (cdr (cdr (car (cdr (car (cdr (car(cdr list3)))))))))))
;(cadar (cddadr (cadadr list3)))


;ex 2.26
(define x1 (list 1 2 3))
(define y1 (list 4 5 6))

;ex 2.27
(define (reverse li)
  (define (iter li ret)
    (if (null? li)
      ret
      (iter (cdr li) (cons (car li) ret))))
  (iter li (list)))


(define (deep-reverse li)
  (if (pair? li)
    (append (deep-reverse (cdr li)) (list (deep-reverse (car li))))
    li))

;ex 2.28
(define (fringe li)
  (if (pair? li)
    (append (fringe (car li)) (fringe (cdr li)))
    (if (null? li) li (list li))))


;ex 2.29
(define (make-mobile left right) 
  (list left right))


(define (make-branch length structure) 
  (list length structure))


(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (cadr mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cadr branch))

;ex 2.29 b
(define (total-weight structure)
  (if (pair? structure)
    (+ (total-weight (branch-structure (left-branch structure)))
       (total-weight (branch-structure (right-branch structure))))
    structure))

(define (branch-torque branch)
  (* (branch-length branch) (total-weight (branch-structure branch))))

(define (same-torque? mobile)
  (= (branch-torque (left-branch mobile))
     (branch-torque (right-branch mobile))))


(define (balanced? mobile)
  (if (pair? mobile)
    (and (same-torque? mobile)
         (balanced? (branch-structure (left-branch mobile)))
         (balanced? (branch-structure (right-branch mobile))))
    #t))

;ex 2.29d

;(define (make-mobile left right) 
;  (cons left right))
;
;(define (make-branch length structure) 
;  (cons length structure))
;
;(define (right-branch mobile)
;  (cdr mobile))
;
;(define (branch-structure branch)
;  (cdr branch))




(define mobileA (make-mobile (make-branch 5 8) (make-branch 6 9)))
(define mobileB (make-mobile (make-branch 15 7) (make-branch 3 8)))
(define mobileC (make-mobile (make-branch 1 8) (make-branch 9 7)))

(define mobileD (make-mobile (make-branch 5 mobileA) (make-branch 8 mobileB)))

(define mobile1 (make-mobile (make-branch 1 4) (make-branch 2 2)))
(define mobile2 (make-mobile (make-branch 1 8) (make-branch 2 4)))
(define mobile3 (make-mobile (make-branch 1 12) (make-branch 2 6)))

(define mobile1+2 (make-mobile (make-branch 2 mobile1) (make-branch 1 mobile2)))

(define mobile4 (make-mobile (make-branch 1 mobile1+2) (make-branch 1 mobile3)))


; branchのlength * branchの総重量を返す
(define (total-torque branch)
    (* (branch-length branch) (total-weight (branch-structure branch)))
      )

(define (balanced-test mobile)
      (if (not (pair? mobile))
        0
        (if (= (total-torque (left-branch mobile)) (total-torque (right-branch mobile)))
          (+ (balanced-test (branch-structure (left-branch mobile)))   ; 次回の処理に重りかモビールが渡る
             (balanced-test (branch-structure (right-branch mobile)))) ; 次回の処理に重りかモビールが渡る
          (display "Not balanced")
          )
        )
      )
