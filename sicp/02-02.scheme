(define nil (list))
;2.17
(define (last-pair ls)
  (if (null? (cdr ls))
    (car ls)
    (last-pair (cdr ls) )))

;2.18

(define (reverse li)
  (define (iter li ret)
    (if (null? li)
      ret
      (iter (cdr li) (cons (car li) ret))))
  (iter li (list)))


; ex2.19

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
          (+ (cc amount
                 (except-first-denomination
                   coin-values))
             (cc (- amount
                    (first-denomination
                      coin-values))
                 coin-values)))))

;coin-valuesの左端の要素を返す
(define (first-denomination coin-values)
  (car coin-values)
  )

; coin-valuesの左端を削ったリストを返す
(define (except-first-denomination coin-values)
  (cdr coin-values)
  )

; 与えられたリストを最後まで走査したか？
(define (no-more? coin-values)
  (null? coin-values)
  )

; ex-2.20

(define (parity n) (mod n 2))

(define (same-parity . ls)
  (filter-parity (parity (car ls)) ls)
  )

(define (same-parity2 first . rest)
  (cons first (filter-parity (parity first) rest))
  )

; par = 0 or 1
(define (filter-parity par ls)
  (if (null? ls)
    (list) ;空リスト
    (if (= (parity (car ls)) par)
      (cons (car ls) (filter-parity par (cdr ls)))
      (filter-parity par (cdr ls))
      )
    )
  )


;ex 2.21
;(define (map proc items) 
;  (if (null? items)
;    (list)
;    (cons (proc (car items))
;          (map proc (cdr items)))))

(define (square a) (* a a))

(define (square-list1 items) 
  (if (null? items)
    (list)
    (cons (square (car items)) 
          (square-list1 (cdr items))))) 

(define (square-list2 items)
  (map square items))



;ex 2.23
(define (for-each proc items)
  (if (null? items)
    (list)
    (cons (proc (car items))
          (for-each proc (cdr items)))))


;(for-each 
;  (lambda (x) 
;    (newline)
;    (display x)) 
;  (list 57 321 88))

;ex 2.25
(define list1 (list 1 3 (list 5 7) 9))
(define list2 (list (list 7)))
(define list3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
(define list4 (list 1 2 3 4 5 6 7))

(car (cdr (car (cdr (cdr list1)))))
(car (cdar (cddr list1)))

(caar list2)

;(car (cdr (car (cdr (cdr (car (cdr (car (cdr (car(cdr list3)))))))))))
;(cadar (cddadr (cadadr list3)))


;ex 2.26
(define x1 (list 1 2 3))
(define y1 (list 4 5 6))

;ex 2.27
(define (reverse li)
  (define (iter li ret)
    (if (null? li)
      ret
      (iter (cdr li) (cons (car li) ret))))
  (iter li (list)))


(define (deep-reverse li)
  (if (pair? li)
    (append (deep-reverse (cdr li)) (list (deep-reverse (car li))))
    li))

;ex 2.28
(define (fringe li)
  (if (pair? li)
    (append (fringe (car li)) (fringe (cdr li)))
    (if (null? li) li (list li))))


;ex 2.29
(define (make-mobile left right) 
  (list left right))


(define (make-branch length structure) 
  (list length structure))


(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (cadr mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cadr branch))

;ex 2.29 b
(define (total-weight structure)
  (if (pair? structure)
    (+ (total-weight (branch-structure (left-branch structure)))
       (total-weight (branch-structure (right-branch structure))))
    structure))

(define (branch-torque branch)
  (* (branch-length branch) (total-weight (branch-structure branch))))

(define (same-torque? mobile)
  (= (branch-torque (left-branch mobile))
     (branch-torque (right-branch mobile))))


(define (balanced? mobile)
  (if (pair? mobile)
    (and (same-torque? mobile)
         (balanced? (branch-structure (left-branch mobile)))
         (balanced? (branch-structure (right-branch mobile))))
    #t))

;ex 2.29d

;(define (make-mobile left right) 
;  (cons left right))
;
;(define (make-branch length structure) 
;  (cons length structure))
;
;(define (right-branch mobile)
;  (cdr mobile))
;
;(define (branch-structure branch)
;  (cdr branch))




(define mobileA (make-mobile (make-branch 5 8) (make-branch 6 9)))
(define mobileB (make-mobile (make-branch 15 7) (make-branch 3 8)))
(define mobileC (make-mobile (make-branch 1 8) (make-branch 9 7)))

(define mobileD (make-mobile (make-branch 5 mobileA) (make-branch 8 mobileB)))

(define mobile1 (make-mobile (make-branch 1 4) (make-branch 2 2)))
(define mobile2 (make-mobile (make-branch 1 8) (make-branch 2 4)))
(define mobile3 (make-mobile (make-branch 1 12) (make-branch 2 6)))

(define mobile1+2 (make-mobile (make-branch 2 mobile1) (make-branch 1 mobile2)))

(define mobile4 (make-mobile (make-branch 1 mobile1+2) (make-branch 1 mobile3)))


; branchのlength * branchの総重量を返す
(define (total-torque branch)
    (* (branch-length branch) (total-weight (branch-structure branch)))
      )

(define (balanced-test mobile)
      (if (not (pair? mobile))
        0
        (if (= (total-torque (left-branch mobile)) (total-torque (right-branch mobile)))
          (+ (balanced-test (branch-structure (left-branch mobile)))   ; 次回の処理に重りかモビールが渡る
             (balanced-test (branch-structure (right-branch mobile)))) ; 次回の処理に重りかモビールが渡る
          (display "Not balanced")
          )
        )
      )

;2.30~32まで やる



;ex 2.33
(define (accumulate op initial sequence) 
  (if (null? sequence) 
    initial
    (op (car sequence) (accumulate op initial (cdr sequence)))))


(define (map-2-33 p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))

(define (append-2-33 seq1 seq2) 
  (accumulate cons seq2 seq1))

(define (length-2-33 sequence) 
  (accumulate (lambda (x y)(+ 1 y)) 0 sequence))

;ex 2.34
(define (horner-eval x coefficient-sequence) 
  (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* x higher-terms)))
              0 coefficient-sequence))

;ex 2.35
(define (count-leaves t)
  (accumulate
    (lambda (item ret)
      (if (pair? item)
        (+ ret (count-leaves item))
        (+ ret 1)
        ))
    0
    t
    ))

;ex-2.36
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
    nil
    (cons 
      (accumulate op init (map car seqs))
      (accumulate-n op init (map cdr seqs)))))

;ex-2.37

(define v1 (list 1 2 3))
(define v2 (list 4 5 6))

(define m1 (list 
             (list 1 2 3)
             (list 4 5 6)
             (list 7 8 9)))

(define m2 (list 
             (list 1 2 3)
             (list 4 5 6)
             (list 7 8 9)))

(define m3 (list 
             (list 1 2 3)
             (list 4 5 6)))

(define m4 (list 
             (list 1 2)
             (list 3 4)
             (list 5 6)))


(define (dot-product v w) (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (w) (dot-product v w)) m))

(define (transpose mat) 
  (accumulate-n cons (list) mat))

(define (matrix-*-matrix m n) 
  (let ((cols (transpose n)))
    (map (lambda (w) (matrix-*-vector cols w)) m)))


;ex 2.38
; == accumulate
(define (fold-right op initial sequence) 
  (if (null? sequence) 
    initial
    (op (car sequence) (accumulate op initial (cdr sequence)))))

(define (fold-left op initial sequence) 
  (define (iter result rest)
    (if (null? rest) 
      result
      (iter (op result (car rest)) (cdr rest))))
  (iter initial sequence))


;ex 2.39
(define (reverse-r sequence)
  (fold-right (lambda (x y) (append y (list x))) nil sequence))

(define (reverse-l sequence)
  (fold-left (lambda (x y) (cons y x)) nil sequence))




;2.2.3
(define (smallest-divisor n) (find-divisor n 2)) 
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor) (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))


(define (prime? n)
  (= n (smallest-divisor n)))

(define (enumerate-interval low high) 
  (if (> low high)
    nil
    (cons low (enumerate-interval (+ low 1) high))))


(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n) (map make-pair-sum
       (filter prime-sum? 
               (flatmap 
                 (lambda (i) (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1)))) 
                 (enumerate-interval 1 n)))))


(define (permutations s)
  (if (null? s) 
    (list nil) (flatmap (lambda (x)
    (map (lambda (p) (cons x p)) (permutations (remove x s))))
  s)))


(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))

(define (unique-pairs n)
  (flatmap 
     (lambda (i) (map (lambda (j) (list j i)) (enumerate-interval 1 (- i 1)))) 
     (enumerate-interval 1 n)))

(define (prime-sum-pairs2 n)
  (map make-pair-sum
       (filter prime-sum? (unique-pairs n))))


;ex 2.41

(define (seq-sum seq)
  (accumulate + 0 seq))

(define (same-total? seq total)
  (= seq-sum(seq) total))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (same-total-pairs n s)
  ())

(define (unique-trios n)
  (flatmap 
     (lambda (i) (map (lambda (j) (list j i)) 
                      (enumerate-interval 1 (- i 1)))) 
     (enumerate-interval 1 n)))

(define (enumerate-interval low high) 
  (if (> low high)
    nil
    (cons low (enumerate-interval (+ low 1) high))))

;ex 2.42

(define (adjoin-position new-row k rest-of-queens)
  (map (lambda (rest) (append rest (list new-row))) rest-of-queens)) 

(define empty-board (list))

(define (safe? k positions) #t)


(define (queens board-size) 
  (define (queen-cols k)
    (if (= k 0)
      (list empty-board) 
      (filter (lambda (positions) (safe? k positions)) 
              (flatmap (lambda (rest-of-queens) 
                         (map (lambda (new-row) (adjoin-position new-row k rest-of-queens))
                              (enumerate-interval 1 board-size))) 
                       (queen-cols (- k 1))))))
  (queen-cols board-size))

(define (test-2.42 val )
  (flatmap
    (lambda (rest-of-queens)
      (map (lambda (new-row) (adjoin-position new-row 5 rest-of-queens)) 
           (enumerate-interval 1 8))
      )
    val ))


  (define test-list (list (list 1 1) ( list 1 2) (list 2 1) (list 2 2)))


;ex 2.44
(define (corner-split painter n) 
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1))) (right (right-split painter (- n 1)))) 
        (let ((top-left (beside up up)) (bottom-right (below right right)) (bottom-right (below right right)) (corner (corner-split painter (- n 1)))) (beside (below painter top-left) (below bottom-right corner)))))) 

(define (right-split painter n) 
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (up-split painter n) 
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
        (below panter (beside smaller smaller)))))


;ex 2.45

;(define right-split (split beside below)) 
;(define up-split (split below beside))

(define (split proc1 proc2)
  (lambda (painter n) 
    (define (step painter n)
      (if (= n 0)
        painter
        (let ((smaller (step painter (- n 1))))
          (proc1 painter (proc2 smaller smaller))))) 
    (step painter n)))


;ex 2.46

(define (make-vect xcor ycor)
  (cons xcor ycor))
(define (xcor-vect vect)
  (car vect))
(define (ycor-vect vect)
  (cdr vect))

(define (add-vect v1 v2)
  (make-vect (+ (xcor-vect v1) (xcor-vect v2))
             (+ (ycor-vect v1) (ycor-vect v2))))
(define (sub-vect v1 v2)
  (make-vect (- (xcor-vect v1) (xcor-vect v2))
             (- (ycor-vect v1) (ycor-vect v2))))

(define (scale-vect v s)
  (make-vect (* s (xcor-vect v))
             (* s (ycor-vect v))))


;ex 2.47
(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))

(define (origin-frame frame) (car frame)) (define (edge1-frame frame)
  (cadr frame))

(define (edge2-frame frame)
  (cddr frame))


;ex 2.48
(define (make-segment start end)
  (cons start end))

(define (start-segment segment)
  (car segment))

(define (end-segment segment)
  (cdr segment))

; ex 2.49
(define (segments->painter segment-list) 
  (lambda (frame)
    (for-each
      (lambda (segment)
        (draw-line 
          ((frame-coord-map frame) (start-segment segment))
          ((frame-coord-map frame) (end-segment segment))))
      segment-list)))

(define p1
  (segments->painter 
    (list 
      (make-segment (make-vect 0 0) (make-vect 0 1))
      (make-segment (make-vect 0 1) (make-vect 1 1))
      (make-segment (make-vect 1 1) (make-vect 1 0))
      (make-segment (make-vect 1 0) (make-vect 0 0))
      )))

(define (frame-coord-map frame) 
  (lambda (v)
    (add-vect 
      (origin-frame frame)
      (add-vect (scale-vect (xcor-vect v) (edge1-frame frame))
                (scale-vect (ycor-vect v) (edge2-frame frame))))))

(define

(define test-frame 
  (make-frame 
    (make-vect 0 0) 
    (make-vect 0 1)
    (make-vect 0 1)))

;(define p2
;  (segments->painter 
;    (list 
;      (make-segment (make-vect 0 0) (make-vect 1 1))
;      (make-segment (make-vect 0 1) (make-vect 1 0))
;      )))
;
;(define p3
;  (segments->painter 
;    (list 
;      (make-segment (make-vect 0 0.5) (make-vect 0.5 1))
;      (make-segment (make-vect 0.5 1) (make-vect 1 0.5))
;      (make-segment (make-vect 1 0.5) (make-vect 0.5 0))
;      (make-segment (make-vect 0.5 0) (make-vect 0 0.5))
;      )))


(define (transform-painter painter origin corner1 corner2) 
  (lambda (frame)
    (let ((m (frame-coord-map frame))) 
      (let ((new-origin (m origin)))
        (painter (make-frame new-origin 
                      (sub-vect (m corner1) new-origin) 
                      (sub-vect (m corner2) new-origin)))))
    ))

(define (squash-inwards painter) 
  (transform-painter 
    painter
    (make-vect 1.0 0.0) 
    (make-vect 0.0 0.0) 
    (make-vect 0.0 1.0)))

(define (rotate90 painter))
(define (rotate180 painter))
(define (rotate270 painter))

(define (below painter1 painter2)
  (let ((paint-top (transform-painter painter1 (make-vect 0.5 0) (make-vect 1 0.5) (make-vect 0.0 1.0)))
        (paint-bottom (transform-painter painter2 (make-vect 0.0 0.0) (make-vect 1.0 0.0) (make-vect 0 0.5)))
    (lambda (frame) (paint-top frame) (paint-bottom frame))))

(define (below2 painter1 painter2)
  (rotate270 (beside (rotate90 painter1) (rotate90 painter2))))

(define L-painter
  (segments->painter 
    (list 
      (make-segment (make-vect 0 0) (make-vect 0 1))
      (make-segment (make-vect 0 0) (make-vect 1 0))
      )))


;2.52 a
(define wave
  (segments->painter
    (list)))

(define mouth 
  (segments->painter
    (list)))

(define (over painter1 painter2)
    (lambda (frame) (painter1 frame) (painter2 frame))))

(define smiling-wave
  (over wave mouth))

;2.52 b

(define (corner-split painter n) 
  (if (= n 0)
      painter
      (let ((up-left (up-split painter (- n 1))) 
            (bottom-right (right-split painter (- n 1))) 
            (corner (corner-split painter (- n 1)))) 
          (beside 
            (below painter up-left) 
            (below bottom-right corner)))))) 

;2.52 c
(define (square-of-four tl tr bl br) 
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter))) 
          (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (square-limit painter n)
  (let ((combine4 (square-of-four identity flip-horiz flip-vert rotate180))) 
    (combine4 (corner-split painter n))))
