(define (memq item x) 
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))

;ex 2.54
(define (equal? x y)
  (if (or (not (pair? x)) (not (pair? y))) 
      (eq? x y)
      (and (equal? (car x) (car y))
           (equal? (cdr x) (cdr y)))))



(define (equal2.54? x y)
  (if (and (pair? x) (pair? y))
      (and (equal2.54? (car x) (car y)) (equal2.54? (cdr x) (cdr y))) 
      (eq? x y)
      ))

;2.3.2
(define (deriv exp var) 
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0)) 
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp) (make-sum (make-product (multiplier exp) (deriv (multiplicand exp) var))
                                  (make-product (deriv (multiplier exp) var) (multiplicand exp))))
        (else (error "unknown expression type: DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2))) 

;(define (make-sum a1 a2) (list '+ a1 a2)) 
;(define (make-product m1 m2) (list '* m1 m2)) 

(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))


(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2) 
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2)) 
        (else (list '+ a1 a2))))

(define (=number? exp num) 
  (and (number? exp) (= exp num)))


(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2)) 
        (else (list '* m1 m2))))

;ex 2.56
(define (deriv exp var) 
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0)) 
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp) (make-sum (make-product (multiplier exp) (deriv (multiplicand exp) var))
                                  (make-product (deriv (multiplier exp) var) (multiplicand exp))))
        ((exponentiation? exp) 
           (let ((x (base exp))
                 (n (exponent exp)))
             (make-product (make-product n (make-exponentiation x (make-sum n -1)))
                           (deriv x var))))
        (else (error "unknown expression type: DERIV" exp))))

(define (make-exponentiation var n)
  (cond ((=number? n 0) 1) 
        ((=number? n 1) var) 
        (else (list '** var n))))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))

(define (base x) (cadr x))
(define (exponent x) (caddr x))

;ex 2.57
(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2) 
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2)) 
        (else (list '+ a1 a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2)) 
        (else (list '* m1 m2))))


(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (product? x) (and (pair? x) (eq? (car x) '*)))

(define (augend s)
  (if (pair? (cdddr s)) 
      (cons '+ (cddr s))
      (caddr s)))

(define (multiplicand p)
  (if (pair? (cdddr p)) 
      (cons '* (cddr p))
      (caddr p)))


;ex 2.58
(define (deriv exp var) 
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0)) 
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp) (make-sum (make-product (multiplier exp) (deriv (multiplicand exp) var))
                                  (make-product (deriv (multiplier exp) var) (multiplicand exp))))
        (else (error "unknown expression type: DERIV" exp))))

(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))

(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))

(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2) 
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2)) 
        (else (list a1 '+ a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2)) 
        (else (list m1 '* m2))))


 '(x + 3 * (x + y + 2))

;ex 2.59
(define (element-of-set? x set) 
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set) 
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        (else (union-set (cdr set1) (adjoin-set (car set1) set2)))))

;ex 2.60
(define (element-of-set2? x set) 
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set2? x (cdr set)))))

(define (adjoin-set2 x set) 
  (cons x set))

(define (intersection-set2 set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set2? (car set1) set2)        
         (cons (car set1) (intersection-set2 (cdr set1) set2)))
        (else (intersection-set2 (cdr set1) set2))))


(define (union-set2 set1 set2)
  (append set1 set2))


;ex 2.61
(define (element-of-set3? x set) 
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set3? x (cdr set)))))


(define (intersection-set3 set1 set2) 
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (intersection-set3 (cdr set1) (cdr set2))))
              ((< x1 x2) (intersection-set3 (cdr set1) set2))
              ((< x2 x1) (intersection-set3 set1 (cdr set2)))))))

;ex 2.62
(define (adjoin-set3 x set) 
  (cond ((null? set) (list x))
        ((= x (car set)) set)
        ((< x (car set)) (cons x set))
        (else (cons (car set) (adjoin-set3 x (cdr set))))))

(define (union-set3 set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        (else 
          (let ((x1 (car set1)) (x2 (car set2)))
            (cond ((= x1 x2) (cons x1 (union-set3 (cdr set1) (cdr set2))))
                  ((< x1 x2) (cons x1 (union-set3 (cdr set1) set2)))
                  ((> x1 x2) (cons x2 (union-set3 set1 (cdr set2)))))))))

;ex 2.63

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree)) 
(define (right-branch tree) (caddr tree)) 
(define (make-tree entry left right) (list entry left right))


;(define (element-of-set? x set) 
;  (cond ((null? set) false)
;        ((= x (entry set)) true) 
;        ((< x (entry set)) (element-of-set? x (left-branch set))) 
;        ((> x (entry set)) (element-of-set? x (right-branch set)))))


(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set) 
        ((< x (entry set)) 
         (make-tree (entry set) (adjoin-set x (left-branch set)) (right-branch set))) 
        ((> x (entry set))
         (make-tree (entry set) (left-branch set) (adjoin-set x (right-branch set))))))


(define (tree->list-1 tree) 
  (if (null? tree) '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree) (tree->list-1 (right-branch tree)))))) 

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list) 
    (if (null? tree) 
        result-list
        (copy-to-list (left-branch tree) (cons (entry tree) (copy-to-list (right-branch tree) result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))


;ex 2.64
(define (partial-tree elts n) 
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result)) 
                (non-left-elts (cdr left-result)) 
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts)) (right-result
                                                     (partial-tree
                                                       (cdr non-left-elts) right-size)))
              (let ((right-tree (car right-result)) (remaining-elts (cdr right-result))) 
                (cons (make-tree this-entry left-tree right-tree) remaining-elts))))))))

;ex 2.65

(define (union-set-for-tree tree1 tree2)
    (list->tree (union-set (tree->list-1 tree1) (tree->list-1 tree2))))

(define (intersection-set-for-tree tree1 tree2)
    (list->tree (intersection-set (tree->list-1 tree1) (tree->list-1 tree2))))

;ex 2.66
(define (lookup given-key set-of-records) 
  (cond ((null? set-of-records) false)
        ((equal? given-key (key (car set-of-records))) (car set-of-records))
        (else (lookup given-key (cdr set-of-records)))))


(define (lookup-for-tree x set) 
  (if (null? set) 
      false
      (let ((ent (entry set)))
        (cond ((= x (key ent)) ent) 
              ((< x (key ent)) (lookup-for-tree x (left-branch set))) 
              ((> x (key ent)) (lookup-for-tree x (right-branch set)))))))


;2.3.4
(define (make-leaf symbol weight) (list 'leaf symbol weight)) 
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right) 
  (list left
        right
        (append (symbols left) (symbols right)) 
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree)) 
(define (right-branch tree) (cadr tree)) 
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree)) 
      (caddr tree)))

(define (weight tree) 
  (if (leaf? tree)
      (weight-leaf tree) 
      (cadddr tree)))

(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits) 
        '() (let ((next-branch (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree)) 
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit: CHOOSE-BRANCH" bit))))


(define (adjoin-set x set) 
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set)) 
        (else (cons (car set)(adjoin-set x (cdr set))))))

(define (make-leaf-set pairs) 
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair) ; symbol
                               (cadr pair)) ; frequency
                    (make-leaf-set (cdr pairs))))))


;ex 2.67
(define sample-tree 
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree (make-leaf 'B 2) 
                                  (make-code-tree (make-leaf 'D 1) 
                                                  (make-leaf 'C 1)))))

(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))

;ex2.68
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree ))))

(define (encode-symbol symbol tree)
  (define (encode-symbol-1 symbol current-branch)        
    (cond
      ((leaf? current-branch) '())
      ((element-of-set? symbol (symbols (left-branch current-branch)))
       (cons '0 (encode-symbol-1 symbol (left-branch current-branch))))
      ((element-of-set? symbol (symbols (right-branch current-branch)))
       (cons '1 (encode-symbol-1 symbol (right-branch current-branch))))
      (else (error "bad bit: CHOOSE-BRANCH" symbol ))))
  (encode-symbol-1 symbol tree))

;ex 2.69
(define (generate-huffman-tree pairs) 
  (successive-merge (make-leaf-set pairs)))

(define (adjoin-set x set) 
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set)) 
        (else (cons (car set)(adjoin-set x (cdr set))))))
(define (make-code-tree left right) 
  (list left
        right
        (append (symbols left) (symbols right)) 
        (+ (weight left) (weight right))))

(define (successive-merge set)
  (cond ((null? set) '())
        ((null? (cdr set)) (car set))
        (else (successive-merge (adjoin-set
                                  (make-code-tree (car set) (cadr set))
                                  (cddr set))))))


(define sample-pairs '((a 8) (b 4) (c 2) (d 1)))

;ex 2.70
(define message-2.70 '(GET A JOB SHA NA NA NA NA NA NA NA NA GET A JOB SHA NA NA NA NA NA NA NA NA WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP SHA BOOM))
(define pairs-2.70 (list '(A 2) '(GET 2) '(SHA 3) '(WAH 1) '(BOOM 1) '(JOB 2) '(NA 16) '(YIP 9)))
(define tree-2.70 (generate-huffman-tree pairs-2.70))

