(define (deriv exp var) 
  (cond ((number? exp) 0) ((variable? exp) (if (same-variable? exp var) 1 0)) (else ((get 'deriv (operator exp)) (operands exp) var)))) 

(define (operator exp) (car exp))
(define (operands exp) (cdr exp))


(define (install-deriv-package)
  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (define (deriv-prod exp var)
    (make-sum (make-product (multiplier exp)
                            (deriv (multiplicand exp) var))
              (make-product (deriv (multiplier exp) var)
                            (multiplicand exp))))

  (put 'deriv '+ deriv-sum)
  (put 'deriv '* deriv-prod))

(define (install-deriv-exp)
  (define (deriv-exp exp var)
    (let ((x (base exp))
          (n (exponent exp)))
      (make-product (make-product n (make-exponentiation x (make-sum n -1)))
                    (deriv x var))))
  (put 'deriv '** deriv-exp))


(define (install-office1-package)
  (define (get-record-office1 name office-data))
  (define (get-salary-office1 name employee-record))

  (put 'get-record 'office1 get-record-office1)
  (put 'get-salary 'office1 get-salary-office1))


(define (get-record employee office-data)
    ((get 'get-record (office-tag office-data)) (office-contents office-data)))

(define (get-salary employee employee-record)
    ((get 'get-salary (employee-tag employee-record)) (employee-contents employee-record)))

(define (find-employee-record name office-data-list)
  (if (null? office-data-list)
      '()
      (let ((employee-record (get-record name (car office-data-list))))
        (if (null? employee-record)
            (find-employee-record name (cdr office-data-list))
            employee-record))))

; ex 2.75
(define (make-from-mag-ang mag ang) 
  (define (dispatch op)
    (cond ((eq? op 'real-part) (* mag (cos ang))) 
          ((eq? op 'imag-part) (* mag (sin ang)))
          ((eq? op 'magnitude) mag) 
          ((eq? op 'angle) ang)
          (else (error "Unknown op: MAKE-FROM-REAL-IMAG" op))))
  dispatch)


; ex 2.87

(define global-array '())

(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))

(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list(make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))

(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
            "No method for these types: APPLY-GENERIC"
            (list op type-tags))))))

(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x)) (put 'add '(scheme-number scheme-number)
                                                      (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number (lambda (x) (tag x))) 'done)

(define (make-scheme-number n) ((get 'make 'scheme-number) n))

(define (attach-tag type-tag contents) (cons type-tag contents))
(define (type-tag datum) (if (pair? datum)
                             (car datum)
                             (error "Bad tagged datum: TYPE-TAG" datum))) (define (contents datum)
                                                                            (if (pair? datum) (cdr datum)
                                                                                (error "Bad tagged datum: CONTENTS" datum)))


(define (install-polynomial-package)
  ;; 内部手続き
  ;; poly の表現
  (define (make-poly variable term-list) (cons variable term-list)) (define (variable p) (car p))
  (define (term-list p) (cdr p))

  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1) 
                   (add-terms (term-list p1) (term-list p2)))
        (error "Polys not in same var: ADD-POLY" (list p1 p2)))) 

  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2)) 
        (make-poly (variable p1) 
                   (mul-terms (term-list p1) (term-list p2))) 
        (error "Polys not in same var: MUL-POLY" (list p1 p2))))


  ;; システムのほかの部分とのインターフェイス
  (define (tag p) (attach-tag 'polynomial p)) 
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2)))) 
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2)))) 
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms)))) 
  'done)

(define (adjoin-term term term-list)
  (if (=zero? (coeff term)) 
      term-list
      (cons term term-list)))
(define (the-empty-termlist) '())
(define (first-term term-list) (car term-list)) 
(define (rest-terms term-list) (cdr term-list)) 
(define (empty-termlist? term-list) (null? term-list)) 
(define (make-term order coeff) (list order coeff)) 
(define (order term) (car term))
(define (coeff term) (cadr term))
